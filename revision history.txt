7/6/2018, 0.12 Update - Functional ATA driver

New
- Added function listings to the beginnings of all files
- Added GDT setting and getting routines to facilitate generation of GDT elements on-the-fly; a first step to multitasking
- Added MemSearchString() - It works for now, but it's not elegant and will definitely need optimized later.
- Added MemCompare(), MemSwapWordBytes(), and MemSwapDWordWords()
- Added PrintIfConfigBits16 and PrintIfConfigBits32 to only print messages if the flag is set in the configbits
- Added a whole buncha string routines! (StringCharAppend(), StringCharPrepend(), StringPadLeft(), StringPadRight(), StringSearchCharList(), StringTruncateLeft(), StringTruncateRight(), StringWordCount(), and StringWordGet(), to be precise)
- ATA Controller.asm (formerly IDE Controller.asm) is now operational for basic PIO mode
- Finished PCIDriverSearch() and PCILoadDrivers()
- The ebp register is now used as it was intended in all functions, allowing more flexibility in stack tracing later

Changed
- All interrupt service routines now preserve the flags register when appropriate
- Both ScreenClear16() and ScreenClear32() now honor the kBytesPerScreen value
- Cleaned up pci.asm and pic.asm with some %defines
- Debug menu now shows the time/date/ticks info (previously on System Info screen) and updates the info in real time while waiting for you to make a choice
- Local variables in all kernel routines are now allocated on the stack, making the kernel fully reentrant. Except for the StringBuild routine. Oh, well. Maybe next version.
- Optimized List Manager code slightly
- Optimized StringLength() for speed
- Relocated GDT header to fit in null descriptor
- Removed all those "changes" lines from the function descriptions for sanity... besides, we shouldn't be counting on any certain registers being preserved anyway!
- Removed CRC32()
- Renamed ClearScreen16() and ClearScreen32() to ScreenClear16() and ScreenClear32()
- Renamed HomeCursor() to CursorHome()
- Renamed IDTWrite() to InterruptHandlerSet()
- Renamed InitGDT to GDTInit and changed its function to now load an allocated GDT once protected mode is active
- Renamed InterruptSetHandlers() to ISRInitAll()
- Renamed various string routines for consistency
- Revamped existing LBA code into C01ATASectorReadLBA28PIO() and C01ATASectorWriteLBA28PIO()

Fixed
- MemSearchDWord() and MemSearchWord() now actually return values O.O
- PrintRegs16 and PrintRegs32 now preserve the flags register
- Squashed a bug in ScreenClear32() which could potentially cause a triple fault depending on the value of ecx




6/10/2018, 0.11 Update - Fleshed out List Manager and PCI routines, other fixes
- Added check for PCI controller before attempting to init the PCI bus
- Added function listing for lists.asm, memory.asm, and pci.asm
- Added PCICalculateNext() in pci.asm
- Added PCIGetNextFunction() in pci.asm
- Added time and date data to system info page on debug menu
- Changed folder locations and modified buildrun.sh accordingly
- Finished LMItemGetAddress() in lists.asm
- Finished PCIGetFunctionCount (formerly PCIGetDeviceCount) in pci.asm
- Optimized (drastically!) the debug menu's PCI listing code and saved around 1.5 KiB
- Removed duplicate code from LMItemAddAtSlot() in lists.asm
- Removed LMListSignatureCreate and LMListSignatureTest from lists.asm
- Replaced CRC checksumming in List Manager routines with a simple signature check for speed :/
- Rewrote PCI routines to use List Manager for data shadowing





6/4/2018, 0.10 Update - Stupid little fixes
- Changed major and minor version numbers to byte size in globals.asm
- Fixed a bug in the newly optimized PCI device name table where the data being written to screen wasn't coming from the right place. And also saved around 300 bytes!





6/4/2018, 0.10 Update - List Manager, 50-line text mode support
- Added 50-line text mode support. Nice for viewing those beautiful diagnostic messages at boot!
- Added allocation for 8 KiB main stack (size set by global value)
- Added configbits setting for screen lines at startup
- Added CRC32() to misc.asm for data checksumming
- Added mouseXLimit and mouseYLimit to the system struct (replaces old method of using the current VESA screen resolution)
- Added PCIDriverLoad() and PCIDriverSearch() for the upcoming driver addition
- Added the beginning of Night's first driver, IDE Controller.asm!
- Added the List Manager (api/lists.asm) to manage lists of things; something the kernel will often need to do
- Changed Debug menu PCI device list to now use List Manager to build its list live and cut the wasted space from hard-coding
- Changed IDT memory to be allocated instead of using a static address
- Changed MemoryInit() to respect the BIOS memory map and no longer allocate at an arbitrary address
- Cleaned up interrupt code and merged 3 files (setints.asm, inthandle.asm, idt.asm) into a single file: interrupts.asm
- Incorporated disks.asm into IDE driver
- Made boot-time diagnostic messages and debug menu obey configbits settings
- Made new folder (api) for accessory code to be used by the kernel and be made available via the Night API
- Minor change to structure of all function descriptions
- Moved ConvertToHexString16() from screen.asm to strings.asm
- Moved keyboard-related globals to ps2.asm
- Moved strings.asm from system folder to api folder
- Moved temporary stack (the only stack we've been using up to this point!) from 0x9F800 to 0x600
- Optimized MemCopy to transfer 16 bytes at a time instead of just one
- Optimized text scrolling algorithm to copy in 16-byte chunks, giving a 76.5% speed increase
- Removed kCRLF from the globals, as it's no longer used
- Removed VESA structs from the globals since we don't have VESA support anymore :/
- Renamed system/api.asm to api/misc.asm
- Trimmed unused routines (PrintDebug, PrintSimple, SetSystemVESA) from misc.asm





4/25/2018, 0.0F Update - Final PCI system
- Added version information to kernel info screen
- Changed PCI system to load device data into RAM and source all subsequent register reads from there
- Made minor changes to folder structure
- Other minor changes





1/19/2018, 0.0E Update - Now runs on real hardware!
- Added automatic sequential highlighted printing to PrintRegsVESA() (formerly RegDump) for extra ease of use
- Added PCI bus probing to kernel startup so it only needs done once because it takes so long
- Added PCI device info dump to debug menu
- Added PCIGetDeviceCount to return the total number of PCI devices (functions) in the system
- Added text color and location features Print16 and Print32 complete with autoscrolling text as the bottom of the screen is reached
- Added CursorHome()
- Added handlers for breakpoint, invalid opcode and GPF exceptions
- Removed VESA support in favor of later having a dedicated graphics driver handle video
- Changed PrintRegs() (formerly RegDump) to not use StringBuild() to do its job, since I needed PrintRegs() to debug StringBuild() O.O
- Changed initial boot code in kernel.asm to print small diagnostic messages to assist debugging on real hardware
- Changed the preferred method of clearing strings from MemCopy-ing an already cleared string over the working one to simply using MemFill to fill the string space with zeros to eliminate the wasted space of the blank strings
- Changed the token used in StringBuild() to ^ instead of %. Why? Mac throwback! 8-)
- Changed text printing routines to work identically in both 16 and 32 bit mode
- Changed the formatting of the GPL text in the beginning of every. Single. File.
- Fixed a read after end of string bug in BuildString() which gave weird results with tokens
- Moved some data out of globals.asm and into the respective files with related routines and removed some unused data to tidy up the globals





12/6/2017, 0.0D Update - Milestone 1
- Added beginning of framework for PCI support (Exelyx C code which will be rewritten in assembly)
- Moved some code around
- Polished LBA code
- Slight modifications to the Debug code
- Structured the project into directories
- Tested and polished the dummy memory allocation routine





12/2/2017, 0.0C Update
- Changed screen.asm to vesa.asm
- Added ConvertToOctalString() and ConvertToBinaryString() to api.asm
- Added ticksSinceBoot system variable for easier timing of events over spans of more than one second
- Added strings.asm
- Added MemFill() and MemCopy() to memory.asm
- Added VESALoadIcon() to vesa.asm
- Added RegDump() to debug.asm for more debugging ease





11/8/2017, 0.0B Update
- Modified Random() to return numbers within a requested limit
- Added a starfield to the boot screen (Makes a nice test for Random()'s new feature! :) )
- Made boot screen selectable by ConfigBits (Also made it disabled by default for now. See the notes at the bottom of globals.asm for details on what ConfigBits can control.)
- Identified (and thus far did nothing about) a bug where the kernel throws an Invalid Opcode exception at 0008:0000001F when started with insufficient video RAM
- Cleaned up kernel.asm and moved some IDT setup code that used to be there to idt.asm
- Added a crosshair cursor (and a couple other surprises) to the Mouse Tracking Test
- Modified VESAPlot() to clip pixels outside the LFB (Writing to memory outside your target is a Very Bad Thing)
- Added the beginning of a RAM browser to the debug menu for inspecting memory without relying on the VirtualBox debugger
- Added ConvertDecimalToString()





11/3/2017, 0.0A Update
-Fixed bug in VESAInit() where setting VESA mode fails silently if video hardware does not support VESA (The error message for the VESA init failing was being printed using VESA. Yes, that is as bad as it sounds. :) )
-Fixed bug in VESAPlot32() where 16-bit registers were being used instead of 32-bit causing graphical errors when drawing at certain points on the screen
-Fixed error message printing in A20Enable()
-Changed infinite loops (except the main one!) to a simple "jmp $"
-Added beginning of serial communication routines (Existing routines transmit data, but still need to add interrupt handlers that actually do something useful. Also only really works on port 1 for now.)
-Added pushad/popad to all unused interrupt handlers for future sanity
-Added VESAClearScreen()
-Added boot logo
-Added TimerWait()
-Added the beginnings of a debug menu (debug.asm)
-Beautification of teh codez1! (Tabs > spaces, kids.)
-Added GPL License.txt since this is kiiiiinda an open-source project and all





10/23/2017, 0.09 Update
-added 32-bit random number generator "Random()"
-added internal time maintenence based on rtc values at boot
-added PrintSimple16() and PrintSimple32()
-added files for upcoming work on deeper hardware management





10/21/2017, 0.08 Cleanup
-split some code from hardware.asm into pic.asm, ps2.asm and screen.asm
-split some code from kernel.asm into api.asm and hardware.asm
-updated all copyright dates and copyright message
-merged build.sh and debug.sh into one script
-modified buildrun.sh to mount the floppy image on its own instead of relying on VirtualBox to already be configured with a specific image to allow more flexibility
...and EVERYTHING STILL WORKS! :D





8/31/2016, 0.08 Update
-Fixed a horribly insidious bug in which the correct VESAPrint function pointer is not used if the address of the low byte of the VESAPrint32 function address happens to be 0x18
-Added limiters on mouse position counters
-Added a DebugPrint as a quick debug aid
-Added jmp $ instructions to all exception handlers which are unimplemented as of yet to make it apparent if the system happens to fall into one. You can't miss a blantant hang lol





8/17/2016, 0.07 Update
-Finished mouse support





8/14/2016, 0.06 Update
-Fixed copyright dates
-Modified timer tick interrupt
-Beginning of mouse interface
-Added background color option to VESAPrint
-Added seconds since boot display to aid in seeing if anything has hung
-Added some FAT structures





8/7/2016, v0.05 Update
-Added 24 bit color support
-Made VESAPrint and VESAPlot function pointers to handle different underlying color depth routines
-Added key buffer, basic keyboard interrupt handler and key fetch routine
-Enabled interrupts - We've finally gone live!
-Various minor fixups and corrections





8/6/2016, v0.04 update bugfixes
-Fixed Maarten's memory code
-Added PrintFail for printing pre-VESA init fatal errors
-other little fixups





8/3/2016, v0.04 update
Condensed code files and added:
-beginning of VESA support
-text drawing in 32-bit graphics modes
-auto detect best mode and set
-Fast A20 enable
-introduced system info structure
-Maarten's memory code
